generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = "postgresql://admin:ninja2afm@127.0.0.1:5432/behnid"
// }

datasource db {
  provider =          "postgresql"
  url      =          "postgresql://postgres:MAtin821363NeW@127.0.0.1:5432/behnid"
}

// postgres:MAtin821363NeW


// USER PART////////////
model User {

  date                           DateTime      @default(now())

  // uniques
  id                             Int           @id @default(autoincrement())
  email                          String?       @unique
  phone                          String        @unique
  name                           String?       @unique

  // other
  password                       String 
  bio                            String?
  status                         Boolean              @default(true)
  Role                           userRole             @default(Buyer)
  avatar                         String?
  profile                        Profile?
  isShown                        Boolean              @default(true)



  
  //city
  cityID                         Int?
  cityName                       String?
  city                           City?                @relation(fields: [cityID,cityName],references: [id,name])

  //products
  sellerProfile                  sellerProfile?
  // products                       Product[]            @relation("products")
  requestsProducts               RequestOnProducts[]
  savedProducts                  Product[]            @relation("savedProducts")

  //comments                    
  commentsBlog                   commentsForBlog[]
  commentsProducts               commentsForProducts[]
  commentsOnProductsComments     commentsForProductsComments[]
  commentsOnBlogComments         commentsForBlogComments[]
  commentsOnSellersPages         commentsForSellers[]
  retesForSellerPages            ratesForSellers[]


  //requests
  freeRequests                   FreeRequests[]           @relation("Author")
  acceptedByMe                   FreeRequests[]           @relation("acceptedBy")
  
  //tickets && notifs
  tickets                        Ticket[]
  notifications                  Notifications?
  
  //chat
  sender                         message[]                 @relation("Sender")
  receiver                       message[]                 @relation("Receiver")
  userOne                        Chats[]                   @relation("userOne")
  userTwo                        Chats[]                   @relation("userTwo")
  contacts                       Contacts[]

  //connections
  connection                     Connections?              @relation("AuthorId")
  followers                      Connections[]             @relation("following")
  following                      Connections[]             @relation("follower")
  // stories                        stories[]                 @relation("story_author")
  seenStories                    stories[]                 @relation("story_seen")


  @@unique([id, name])
  @@unique([phone, email])
}

model Connections {
  AuthorId    Int    @unique
  author      User   @relation("AuthorId",references: [id],fields: [AuthorId])
  follower    User[]  @relation("follower")
  following   User[] @relation("following")

  @@id([AuthorId])
}


model Notifications {
  id               Int                @id @default(autoincrement())
  AuthorId         Int                @unique
  user             User               @relation(fields: [AuthorId] , references: [id])
  message          String             @default("")
  date             DateTime           @default(now())
  seen             Boolean            @default(false)
}

model sellerProfile {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userID],references: [id])
  userID           Int                @unique
  userPhone        String             @unique
  shopName         String?
  shopURLname      String?             @unique       
  shopIntro        String
 
 
  sellerStatus     SellerStatus       @default(unAuthorized)  
  verified         Boolean            @default(false)
  sellerType       sellerType         @default(person)


  //natural
  person_1          String?
  person_2          String?
  person_3          String?
  person_4          String?

  //company
  company_1         String?
  company_2         String?
  company_3         String?
  company_4         String?

  ActivityCategory               Category[]              @relation()
  responseToCities               City[]                  @relation()  

  products                       Product[]               @relation()     
  stories                        stories[]               @relation() 

  site_header       String?     
  phone_num_shown   Boolean                              @default(false)
  rates             ratesForSellers[]
  comments          commentsForSellers[] 
}


model Ticket {
    id              Int         @id @default(autoincrement())
    user            User        @relation(fields: [userID],references: [id],onDelete: Cascade)
    userID          Int        
    title           String      @default("") 
    message         String
    status          TicketStatus
    response        String      @default("")
    responseBy      Int?
    responseAuthor  SuperUser?   @relation(fields: [responseBy],references: [id],onDelete: Cascade)
}


model Profile {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [userID],references: [id])
  userID          Int          @unique
  name            String?      
  family          String?
  address         String?
  profilePic      String?
  instaAcc        String?
  workNumber      String?
}

model Contacts {
  id              Int          @id @default(autoincrement())
  user            User?        @relation(fields: [user_Phone],references: [phone])
  user_Phone      String?      
  contactName     String?
  contactNumber   String?
}



//PRODUCT PART //////////////
model Product {
  id              Int                   @id @default(autoincrement())
  likes           Int                   @default(0)
  image           String?
  title           String
  describe        String
  price           Int
  addDate         DateTime              @default(now())
  sendArea        City[]                @relation("sendArea")
  packType        packType              @default(vanet)
  minOrder        Int
  customerPrice   Int
  producerPrice   Int
  weight          String
  deliveryTime    String
  authorID        Int  
  imgsrc          String?  
  cityName        String?
  seenTime        Int                   @default(0)
  categorieID     Int?
  cityID          Int?
  //relations
  author          sellerProfile         @relation(fields: [authorID],references: [id],onDelete: Cascade )
  savedBy         User[]                @relation(name: "savedProducts")
  categorie       Category?             @relation(fields: [categorieID],references: [id],onDelete: Cascade)
  comments        commentsForProducts[]
  requests        RequestOnProducts[]
  city            City?                 @relation(references: [id],fields: [cityID],onDelete: Cascade,name: "products")
  stories_added   stories[]
  productStatus   ProductStatus         @default(pending)
  freeDelivery    Boolean               @default(false)
  force           Boolean               @default(false)
  isShown         Boolean               @default(true)
  rejectReason    String                @default("")
  sentTo          message[]             @relation()
  keywords        keywordForProducts[]  
  pictures        picture[]
  offPercent      Int?
}


model picture {
  id              Int              @id @default(autoincrement())
  date            DateTime         @default(now())
  src             String
  products        Product[]
}

model stories {
  id              Int              @id @default(autoincrement())
  date            DateTime         @default(now())
  authorID        Int
  authorName      String
  author          sellerProfile    @relation(fields: [authorID],references: [id],onDelete: Cascade)
  seenBy          User[]           @relation(name: "story_seen")
  seenTime        Int              @default(0)
  imgSrc          String           @default("")
  productID       Int?
  product         Product?         @relation(references: [id],fields: [productID],onDelete: Cascade)
}


//add reply for comments
model commentsForProducts {
  id                Int                             @id @default(autoincrement())
  productID         Int?
  product           Product?                        @relation(fields: [productID],references: [id] , onDelete: Cascade)
  AuthorID          Int?
  commentAuthor     User?                           @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  repliedComments   commentsForProductsComments[]
  message           String                          @default("")
  date              DateTime                        @default(now())
}


model commentsForSellers {
  id                Int                             @id @default(autoincrement())
  AuthorID          Int?
  commentAuthor     User?                           @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  message           String                          @default("")

  seller            sellerProfile                   @relation(onDelete: Cascade,references: [id],fields: [sellerID])
  sellerID          Int

  response          String?
  date              DateTime                        @default(now())
}


model ratesForSellers {
  id                Int                             @id @default(autoincrement())
  AuthorID          Int                             @unique
  ratesAuthor       User                            @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  rates             Rates                           @default(unset)
  seller            sellerProfile                   @relation(onDelete: Cascade,references: [id],fields: [sellerID])
  sellerID          Int
  date              DateTime                        @default(now())
}


model commentsForProductsComments {
  id  Int  @id @default(autoincrement())
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  commentID   Int?
  comment   commentsForProducts?   @relation(references: [id],fields: [commentID],onDelete: Cascade)
  message   String  @default("")
  date    DateTime    @default(now())
}


//Category PART//////


model City {
  id    Int    @id @default(autoincrement())
  name  String
  provienceId   Int
  // provienceName   String
  slug            String?
  products Product[] @relation("products")
  productSendArea   Product[] @relation("sendArea")
  requests  FreeRequests[] @relation()
  provience   Provience   @relation(references: [id],fields: [provienceId])
  users   User[]
  sellers sellerProfile[]
  @@unique([id, name])
}


model Provience {
  id    Int    @id @default(autoincrement())
  name  String  
  slug  String?
  cities  City[]
  @@unique([name,id])
  @@unique([id, name])
}


model MainCategory {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  subCategories    SubCategory[]  @relation()
  @@unique([id,name])
}

model SubCategory {
  id                 Int    @id @default(autoincrement())
  name               String @unique
  categories         Category[]  @relation()
  mainCategory       MainCategory     @relation(fields: [mainCatName,mainCatId],references: [name,id],onDelete: Cascade)
  mainCatName        String          @default("")          
  mainCatId          Int             @default(1)
  @@unique([id,name])
}

model Category {
  id                Int                      @id @default(autoincrement())
  name              String                   @unique
  products          Product[]                @relation()
  requests          FreeRequests[]           @relation()
  users             sellerProfile[]          @relation()
  subCategory       SubCategory              @relation(fields: [subCatName,subCatId],references: [name,id],onDelete: Cascade)
  subCatName        String                   @default("")          
  subCatId          Int                      @default(1)
  @@unique([id,name])
}


//requests part//////////
model RequestOnProducts {
  id      Int         @id @default(autoincrement())
  productID Int?
  product   Product? @relation(fields: [productID],references: [id],onDelete: Cascade)
  quantity    Int
  message     String?
  AuthorID  Int
  RequestAuthor   User   @relation(fields: [AuthorID],references: [id],onDelete: Cascade)
  date  DateTime  @default(now())
}



model FreeRequests {
  id              Int         @id @default(autoincrement())
  name            String
  describe        String
  quantity        Int         @default(1)
  packType        packType    @default(kg)

  date            DateTime    @default(now())
  imgsrc          String?

  categorie       Category[] @relation()
  acceptedBy      User[]    @relation(name :"acceptedBy")   
  
  isShown         Boolean               @default(true)
  seenTime        Int    @default(0)


  city            City?     @relation(references: [id],fields: [cityId],onDelete: Cascade)
  cityId          Int?
  
  Author          User  @relation(name:"Author",fields: [authorID],references: [id],onDelete: Cascade)
  authorID        Int

  keywords        keywordForFreeRequests[]
  status          RequestStatus         @default(pending)
  force           Boolean               @default(false)
  rejectReason    String                @default("")
  sentTo          message[]             @relation()
}






//blog part///////////////
model Blog {
  id        Int                  @id @default(autoincrement())
  title     String
  describe  String
  imgsrc    String?
  date      DateTime             @default(now())
  likes     Int                  @default(0)
  seenTime  Int                  @default(0)
  comments  commentsForBlog[]
  authorId  Int?
  author    SuperUser            @relation(fields: [id],references: [id],onDelete: Cascade)
  keywords  keywordForBlog[]     @relation()
  category  CategoryForBlog[]    @relation() 
}



model CategoryForBlog {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  blog              Blog[]
  @@unique([id,name])
}



model commentsForBlog {
  id  Int  @id @default(autoincrement())
  blogID   Int?
  blog  Blog?   @relation(fields: [blogID],references: [id],onDelete: Cascade)
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id],onDelete: Cascade)
  repliedComments   commentsForBlogComments[]
  message   String  @default("")
  date      DateTime    @default(now())
}



model keywordForBlog {
  id       Int  @id @default(autoincrement())
  name     String
  blog     Blog[]
}


model keywordForFreeRequests {
  id       Int  @id @default(autoincrement())
  name     String
  request     FreeRequests  @relation(fields: [requestId],references: [id],onDelete: Cascade)
  requestId   Int
}


model keywordForProducts {
  id       Int  @id @default(autoincrement())
  name     String
  product     Product  @relation(references: [id],fields: [productId],onDelete: Cascade)
  productId   Int
}


model commentsForBlogComments {
  id  Int  @id @default(autoincrement())
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  commentID   Int?
  comment   commentsForBlog?   @relation(references: [id],fields: [commentID],onDelete: Cascade)
  message   String  @default("")
  date    DateTime    @default(now())
}

model passwdReg {
  id            Int     @id  @default(autoincrement())
  phone         String    @unique
  verifyCode    String  
}


model passwdReset {
  id             Int     @id  @default(autoincrement())
  phone          String    @unique
  verifyCode     String  
}


model Chats {
  id           Int   @id  @default(autoincrement())

  userOne      User    @relation( fields: [userOneId], references: [id],name :"userOne",onDelete: Cascade)
  userOneId    Int    
 
  userTwo      User    @relation(fields: [userTwoId], references: [id],name: "userTwo",onDelete: Cascade)
  userTwoId    Int       

  message      message[]
}

model message {
  id          Int             @id   @default(autoincrement())
 
  chatID      Int
  chat        Chats           @relation(fields: [chatID],references: [id],onDelete: Cascade)
  
  sender      User            @relation( fields: [senderId], references: [id],name :"Sender",onDelete: Cascade)
  senderId    Int     
 
  reciever    User            @relation(fields: [recieverId], references: [id],name: "Receiver",onDelete: Cascade)
  recieverId  Int 
  
  image       String?         @default("")
  voice       String?         @default("")
  pdf         String?         @default("")
  text        String?
  replyedTo   Int?

  date        DateTime        @default(now())
  hasSeen     Boolean         @default(false)
  liked       Boolean         @default(false) 


  product     Product?        @relation(references: [id],fields: [productId],onDelete: Cascade)
  productId   Int?
  request     FreeRequests?   @relation(references: [id],fields: [requestId],onDelete: Cascade)
  requestId   Int?
}


/////// SUPER_USER_PART
model SuperUser {
  id        Int           @id @default(autoincrement())
  email     String?        @unique
  phone     String        @unique
  name      String?       @unique
  address   String?
  password  String 
  Role      superUserRole      @default(full_access)
  avatar    String?
  blogs     Blog[]        @relation()
  tickets   Ticket[]      @relation()
}



//enums and types/////////////////////////////////////////////////////////
enum userRole {
  Buyer
  Seller
}

enum packType {
  vanet
  camiun
  kg
}

enum sellerType {
  person
  company
}

enum TicketStatus {
  pending
  seen
  done
}

enum SellerStatus {
  pending
  rejected
  accepted
  unAuthorized
}

enum ProductStatus {
  pending
  rejected
  accepted
}


enum RequestStatus {
  pending
  rejected
  accepted
}


enum superUserRole {
  full_access
  blog_admin
  request_admin
  ticket_admin
  authorization
}

enum Rates {
  one
  two 
  three
  four 
  five
  unset
}