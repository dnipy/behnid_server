generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = "postgresql://admin:ninja2afm@127.0.0.1:5432/behnid"
// }

datasource db {
  provider =          "postgresql"
  url      =          "postgresql://postgres:MAtin821363NeW@127.0.0.1:5432/behnid"
}

// postgres:MAtin821363NeW


// USER PART////////////
model User {

  date                           DateTime      @default(now())

  // uniques
  id                             Int           @id @default(autoincrement())
  email                          String?       @unique
  phone                          String        @unique
  name                           String?       @unique

  // other
  password                       String 
  bio                            String?
  status                         Boolean       @default(true)
  Role                           userRole      @default(Buyer)
  avatar                         String?
  profile                        Profile?
  isShown                        Boolean       @default(true)



  
  //city
  cityID                         Int?
  cityName                       String?
  city                           City?    @relation(fields: [cityID,cityName],references: [id,name])

  //products
  sellerProfile                  sellerProfile?
  products                       Product[]     @relation()
  requestsProducts               RequestOnProducts[]

  //comments
  commentsBlog                   commentsForBlog[]
  commentsProducts               commentsForProducts[]
  commentsOnProductsComments     commentsForProductsComments[]
  commentsOnBlogComments         commentsForBlogComments[]

  //requests
  freeRequests                   FreeRequests[]     @relation("Author")
  acceptedByMe                   FreeRequests[]     @relation("acceptedBy")
  
  //tickets && notifs
  tickets                        Ticket[]
  notifications                  Notifications?
  
  //chat
  sender                         message[]                 @relation("Sender")
  receiver                       message[]                 @relation("Receiver")
  userOne                        Chats[]                   @relation("userOne")
  userTwo                        Chats[]                   @relation("userTwo")
  contacts                       Contacts[]

  //connections
  connection                     Connections?              @relation("AuthorId")
  followers                      Connections[]             @relation("following")
  following                      Connections[]             @relation("follower")
  stories                        stories[]

  ActivityCategory               Category?                 @relation(references: [name,id],fields: [CategoryName,CategoryId])
  CategoryName                   String?
  CategoryId                     Int?
  
  @@unique([id, name])
  @@unique([phone, email])
}

model Connections {
  AuthorId    Int    @unique
  author      User   @relation("AuthorId",references: [id],fields: [AuthorId])
  follower    User[]  @relation("follower")
  // followerId  Int
  following   User[] @relation("following")
  // followingId Int

  @@id([AuthorId])
}


model Notifications {
  id               Int                @id @default(autoincrement())
  AuthorId         Int                @unique
  user             User               @relation(fields: [AuthorId] , references: [id])
  message          String             @default("")
  date             DateTime           @default(now())
  seen             Boolean            @default(false)
}

model sellerProfile {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userID],references: [id])
  userID           Int                @unique
  verified         Boolean            @default(false)
  shopIntro        String
  cityID           Int?
  city             City?              @relation(fields: [cityID] , references: [id])
  sellerStatus     SellerStatus       @default(unAuthorized)
  sellerType       sellerType         @default(person)

  //natural
  person_1          String?
  person_2          String?
  person_3          String?
  person_4          String?

  //company
  company_1         String?
  company_2         String?
  company_3         String?
  company_4         String?
}


model Ticket {
    id              Int           @id @default(autoincrement())
    user            User        @relation(fields: [userID],references: [id],onDelete: Cascade)
    userID          Int        
    title           String      @default("") 
    message         String
    status          TicketStatus
    response        String      @default("")
    responseBy      Int?
    responseAuthor  SuperUser?   @relation(fields: [responseBy],references: [id],onDelete: Cascade)
}


model Profile {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [userID],references: [id])
  userID          Int          @unique
  provienceID     Int          @default(0)
  followers       Int          @default(0)
  following       Int          @default(0)
  name            String?      
  family          String?
  address         String?
  profilePic      String?
  instaAcc        String?
  workNumber      String?
}

model Contacts {
  id              Int          @id @default(autoincrement())
  user            User?        @relation(fields: [user_Phone],references: [phone])
  user_Phone      String?      
  contactName     String?
  contactNumber   String?
}



//PRODUCT PART //////////////
model Product {
  id              Int                   @id @default(autoincrement())
  likes           Int                   @default(0)
  image           String?
  title           String
  describe        String
  price           Int
  addDate         DateTime              @default(now())
  sendArea        String?
  packType        packType              @default(vanet)
  minOrder        Int
  customerPrice   Int
  producerPrice   Int
  weight          String
  deliveryTime    String
  authorID        Int  
  imgsrc          String?  
  cityName        String?
  seenTime        Int                   @default(0)
  //relations
  author          User                  @relation(fields: [authorID],references: [id],onDelete: Cascade )
  categorie       Category[]            @relation()
  comments        commentsForProducts[]
  requests        RequestOnProducts[]
  city            City?                 @relation(references: [name],fields: [cityName],onDelete: Cascade)
  freeDelivery    Boolean               @default(false)
  force           Boolean               @default(false)
  isShown         Boolean               @default(true)
  productStatus   ProductStatus         @default(pending)
}


model stories {
  id              Int     @id @default(autoincrement())
  date            DateTime    @default(now())
  authorID        Int
  authorName      String
  author          User    @relation(fields: [authorID,authorName],references: [id,name])
  seenTime        Int     @default(0)
  imgSrc          String  @default("")
}


//add reply for comments

model commentsForProducts {
  id                Int                             @id @default(autoincrement())
  productID         Int?
  product           Product?                        @relation(fields: [productID],references: [id] , onDelete: Cascade)
  AuthorID          Int?
  commentAuthor     User?                           @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  repliedComments   commentsForProductsComments[]
  message           String                          @default("")
  date              DateTime                        @default(now())
}

model commentsForProductsComments {
  id  Int  @id @default(autoincrement())
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  commentID   Int?
  comment   commentsForProducts?   @relation(references: [id],fields: [commentID],onDelete: Cascade)
  message   String  @default("")
  date    DateTime    @default(now())
}


//Category PART//////


model City {
  id    Int    @id @default(autoincrement())
  name  String  @unique
  provienceId   Int
  provienceName   String
  products Product[] @relation()
  requests  FreeRequests[] @relation()
  provience   Provience   @relation(references: [id,name],fields: [provienceId,provienceName])
  users   User[]
  sellers sellerProfile[]

  @@unique([id, name])
  
}


model Provience {
  id    Int    @id @default(autoincrement())
  name  String  
  cities  City[]
  @@unique([name,id])
  @@unique([id, name])
}


model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  products Product[] @relation()
  requests  FreeRequests[] @relation()
  users     User[]          @relation()
  @@unique([id,name])
}


//requests part//////////
model RequestOnProducts {
  id      Int         @id @default(autoincrement())
  productID Int?
  product   Product? @relation(fields: [productID],references: [id],onDelete: Cascade)
  quantity    Int
  message     String?
  AuthorID  Int
  RequestAuthor   User   @relation(fields: [AuthorID],references: [id],onDelete: Cascade)
  date  DateTime  @default(now())
}

model FreeRequests {
  id      Int         @id @default(autoincrement())
  date  DateTime  @default(now())
  image   String?
  quantity    Int   @default(1)
  name    String
  describe  String
  imgsrc    String?
  categorie Category[] @relation()
  seenTime   Int    @default(0)
  authorID  Int
  cityId    Int?
  acceptedBy    User[]    @relation(name :"acceptedBy")   
  Author  User  @relation(name:"Author",fields: [authorID],references: [id],onDelete: Cascade)
  city        City?     @relation(references: [id],fields: [cityId],onDelete: Cascade)
  isShown         Boolean               @default(true)
}



//blog part///////////////
model Blog {
  id        Int         @id @default(autoincrement())
  title     String
  describe  String
  imgsrc    String?
  date      DateTime      @default(now())
  likes     Int       @default(0)
  seenTime  Int @default(0)
  comments  commentsForBlog[]
  authorId  Int?
  author    SuperUser   @relation(fields: [id],references: [id],onDelete: Cascade)
}


model commentsForBlog {
  id  Int  @id @default(autoincrement())
  blogID   Int?
  blog  Blog?   @relation(fields: [blogID],references: [id],onDelete: Cascade)
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id],onDelete: Cascade)
  repliedComments   commentsForBlogComments[]
  message   String  @default("")
  date      DateTime    @default(now())
}

model commentsForBlogComments {
  id  Int  @id @default(autoincrement())
  AuthorID  Int?
  commentAuthor   User?   @relation(fields: [AuthorID],references: [id] , onDelete:  Cascade)
  commentID   Int?
  comment   commentsForBlog?   @relation(references: [id],fields: [commentID],onDelete: Cascade)
  message   String  @default("")
  date    DateTime    @default(now())
}

model passwdReg {
  id            Int     @id  @default(autoincrement())
  phone         String    @unique
  verifyCode    String  
}


model passwdReset {
  id             Int     @id  @default(autoincrement())
  phone          String    @unique
  verifyCode     String  
}


model Chats {
  id  Int   @id   @default(autoincrement())

  userOne      User    @relation( fields: [userOneId], references: [id],name :"userOne",onDelete: Cascade)
  userOneId    Int    
 
  userTwo    User    @relation(fields: [userTwoId], references: [id],name: "userTwo",onDelete: Cascade)
  userTwoId  Int       

  message   message[]
}

model message {
  id  Int             @id   @default(autoincrement())
 

  chatID  Int
  chat  Chats         @relation(fields: [chatID],references: [id],onDelete: Cascade)
  
  sender      User    @relation( fields: [senderId], references: [id],name :"Sender",onDelete: Cascade)
  senderId    Int     
 
  reciever    User    @relation(fields: [recieverId], references: [id],name: "Receiver",onDelete: Cascade)
  recieverId  Int 
  
  image   String? @default("")
  voice   String? @default("")

  
  text  String?
  date  DateTime  @default(now())
  hasSeen Boolean @default(false)

}


/////// SUPER_USER_PART

model SuperUser {
  id        Int           @id @default(autoincrement())
  email     String?        @unique
  phone     String        @unique
  name      String?       @unique
  address   String?
  password  String 
  Role      superUserRole      @default(full_access)
  avatar    String?
  blogs     Blog[]        @relation()
  tickets   Ticket[]      @relation()
}




//enums and types/////////////////////////////////////////////////////////
enum userRole {
  Buyer
  Seller
}

enum packType {
  vanet
  camiun
  kg
}

enum sellerType {
  person
  company
}

enum TicketStatus {
  pending
  seen
  done
}

enum SellerStatus {
  pending
  rejected
  accepted
  unAuthorized
}

enum ProductStatus {
  pending
  rejected
  accepted
}

enum superUserRole {
  full_access
  blog_admin
  request_admin
  ticket_admin
  authorization
}
